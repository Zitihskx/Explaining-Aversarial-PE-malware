#!/usr/bin/env python
# coding: utf-8

# In[ ]:





# In[2]:


import pefile
import r2pipe
import pandas as pd
import os

def extract_pe_info(pe_file):
    try:
        pe = pefile.PE(pe_file, fast_load=True)
    except:
        return pd.DataFrame()
    
    file_size = os.path.getsize(pe_file)
    perturb_size = file_size*0.1 #Assuming 10% appended perturbation
    
    # Dos Header
    try:
        dos_header_offset = 0
        dos_header_size = pe.DOS_HEADER.sizeof()
    except:
        dos_header_offset = 0
        dos_header_size = 0

    # PE Signature
    try:
        pe_signature_offset = pe.DOS_HEADER.e_lfanew
        pe_signature_size = 4
    except:
        pe_signature_offset = 0
        pe_signature_size = 0

    # COFF File Header
    try:
        coff_header_offset = pe_signature_offset + pe_signature_size
        coff_header_size = pe.FILE_HEADER.sizeof()
    except:
        coff_header_offset = 0
        coff_header_size = 0

    # Optional Header
    try:
        optional_header_offset = coff_header_offset + coff_header_size
        optional_header_size = pe.FILE_HEADER.SizeOfOptionalHeader
    except:
        optional_header_offset = 0
        optional_header_size = 0
    
    # Data Directories
    try:
        data_directories_offset = optional_header_offset + optional_header_size
        data_directories_size = sum(entry.sizeof() for entry in pe.OPTIONAL_HEADER.DATA_DIRECTORY)
    except:
        data_directories_offset = optional_header_offset + optional_header_size
        data_directories_size = sum(entry.sizeof() for entry in pe.OPTIONAL_HEADER.DATA_DIRECTORY)
    #data_directories_size = pe.FILE_HEADER.NumberOfSections * pe.FILE_HEADER.SizeOfOptionalHeader

    # Section Headers
    try:
        section_headers_offset = data_directories_offset + data_directories_size
        section_headers_size = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes * 8
    except:
        section_headers_offset = 0
        section_headers_size = 0

    # Section Data
    section_names = []
    section_starts = []
    section_sizes = []
    for section in pe.sections:
        if section.Name.decode().rstrip('\x00') in ('.text','.data','.rdata','.rsrc', '.reloc'):
            section_names.append(section.Name.decode().rstrip('\x00'))
            section_starts.append(section.PointerToRawData)
            section_sizes.append(section.SizeOfRawData)

    # Create DataFrame
    df = pd.DataFrame({
        'Section': ['DOS Header', 'PE Signature', 'COFF File Header', 'Optional Header', 'Data Directories',
                   'Section Headers','After EndOfFile'],
        'Start': [dos_header_offset, pe_signature_offset, coff_header_offset, optional_header_offset,
                   data_directories_offset, section_headers_offset, file_size],
        'Size': [dos_header_size, pe_signature_size, coff_header_size, optional_header_size,
                 data_directories_size, section_headers_size, perturb_size]
    })

    # Add section information to DataFrame
    df_sections = pd.DataFrame({
        'Section': section_names,
        'Start': section_starts,
        'Size': section_sizes
    })
    
    df_merged = pd.concat([df, df_sections], ignore_index=True)
    df_merged['End'] = df_merged['Start'] +df_merged['Size'] - 1
    # Print the DataFrames
    # print("Overall PE Structure:")
    # print(df_merged)

    # Close the PE file
    pe.close()
    return df_merged

# Replace the path with the actual path to your PE file
extract_pe_info("/home/user/Downloads/malconv_train/0a8deb24eef193e13c691190758c349776eab1cd65fba7b5dae77c7ee9fcc906")

